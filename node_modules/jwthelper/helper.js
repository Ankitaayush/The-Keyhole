
var jwt = require('jsonwebtoken');
var extend = require('extend');

/*
 The default options to create the JWT object with
*/
var defaultOptions = {
    'algorithm': 'HS512'
};

/*
 JWT object

   Options:
    - algorithm
    - expiresInMinutes or expiresInSeconds
    - audience
    - subject
    - issuer
    - noTimestamp
    - headers
    - ignoreExpiration
*/
var JWTHelper = function(options) {

    /*
     Updates the options
    */
    this.setOptions = function(newOptions) {
        options = extend(options, newOptions);
    };

    /*
     Sign a new JWT and return it
    */
    this.sign = function(payload, signOptions) {

        signOptions = extend(options, signOptions || {});
        if(!signOptions.secret && !signOptions.privateKey) return new Error('Secret or private key not supplied');
        return jwt.sign(payload, signOptions.secret || signOptions.privateKey, signOptions);

    };

    /*
     Verify a token
    */
    this.verify = function(token, verifyOptions, callback) {
        if(!callback && typeof verifyOptions === 'function') {
            callback = verifyOptions;
            verifyOptions = {};
        }
        verifyOptions = extend(options, verifyOptions);
        if(!verifyOptions.secret && !verifyOptions.privateKey) return callback(new Error('Secret or private key not supplied'));
        jwt.verify(token, verifyOptions.secret || verifyOptions.privateKey, verifyOptions, callback);
    };

    /*
     Decode a token without validating it
    */
    this.decode = function(token, decodeOptions) {
        return jwt.decode(token, decodeOptions || {});
    };
};

/*
 Creates a new JWT object
*/
exports.createJWTHelper = module.exports.createJWTHelper = function(options) {
    options = extend(defaultOptions, options || {});
    return new JWTHelper(options);
};
